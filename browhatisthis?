--// SERVICES
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

--// SETTINGS
local floatHeightOffset = 0 -- On the ground
local floatSpeed = 16
local teleportDistance = 7
local floating = false
local noclipEnabled = false
local espEnabled = false
local espBoxSizeMultiplier = 1 -- This will now affect BillboardGui size

local hrp, humanoid = nil, nil
local bodyPos, bodyVel = nil, nil

local gui = nil
local connections = {}

local espUIs = {} -- Changed from espBoxes to espUIs to reflect GUI elements

-- Global Theme persistence
getgenv().BrainrotTheme = getgenv().BrainrotTheme or {
    MainBGTransparency = 0.1,
    SwitchOnColor = Color3.fromRGB(0, 162, 255),
    SwitchOffColor = Color3.fromRGB(200, 50, 50),
    TextColor = Color3.fromRGB(220, 220, 220),
    UIBackgroundColor = Color3.fromRGB(28, 28, 28),
    ESPColor = Color3.fromRGB(0, 162, 255),
    ESPTransparency = 0,
    ESPBoxSizeMultiplier = 1,
}

local theme = getgenv().BrainrotTheme

local function roundTo2Decimals(num)
    return math.floor(num * 100 + 0.5) / 100
end

local function cleanUp()
    if gui then
        gui:Destroy()
        gui = nil
    end

    for _, con in pairs(connections) do
        if con and con.Connected then
            con:Disconnect()
        end
    end
    connections = {}

    -- Clean up ESP UIs
    for plr, data in pairs(espUIs) do
        if data.billboardGui and data.billboardGui.Parent then data.billboardGui:Destroy() end
    end
    espUIs = {}

    if floating then
        floating = false
        if bodyPos and bodyPos.Parent then bodyPos:Destroy() end
        if bodyVel and bodyVel.Parent then bodyVel:Destroy() end
        if humanoid then humanoid.PlatformStand = false end
    end
end

local function createSlider(parent, labelText, default, min, max, onChange)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 60) -- Increased height for better spacing
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.4, 0, 0, 20)
    label.Text = labelText
    label.TextColor3 = theme.TextColor
    label.Font = Enum.Font.GothamSemibold
    label.TextSize = 16
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local track = Instance.new("Frame")
    track.Size = UDim2.new(0.6, 0, 0, 8) -- Thicker track
    track.Position = UDim2.new(0, 0, 0, 30)
    track.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    track.AnchorPoint = Vector2.new(0, 0)
    track.Parent = container
    track.ClipsDescendants = true
    Instance.new("UICorner", track).CornerRadius = UDim.new(1, 0)

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = theme.SwitchOnColor
    fill.Parent = track
    Instance.new("UICorner", fill).CornerRadius = UDim.new(1, 0)

    local valueText = Instance.new("TextLabel")
    valueText.Size = UDim2.new(0.3, 0, 0, 20)
    valueText.Position = UDim2.new(0.7, 10, 0, 30)
    valueText.Text = tostring(roundTo2Decimals(default))
    valueText.TextColor3 = theme.TextColor
    valueText.Font = Enum.Font.GothamBold
    valueText.TextSize = 16
    valueText.BackgroundTransparency = 1
    valueText.TextXAlignment = Enum.TextXAlignment.Right
    valueText.Parent = container

    local draggingSlider = false

    local function updateValueFromPosition(x)
        local absPos = track.AbsolutePosition.X
        local absSize = track.AbsoluteSize.X
        local percent = math.clamp((x - absPos) / absSize, 0, 1)
        local value = min + (max - min) * percent
        value = roundTo2Decimals(value)
        fill.Size = UDim2.new(percent, 0, 1, 0)
        valueText.Text = tostring(value)
        onChange(value)
    end

    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSlider = true
        end
    end)

    track.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSlider = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValueFromPosition(input.Position.X)
        end
    end)

    return container, function()
        return draggingSlider
    end
end

local function createToggleSwitch(parent, labelText, initialState)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 40) -- More vertical space
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Text = labelText
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Font = Enum.Font.GothamSemibold
    label.TextColor3 = theme.TextColor
    label.TextSize = 16
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local switch = Instance.new("Frame")
    switch.Size = UDim2.new(0, 50, 0, 28) -- Slightly larger switch
    switch.Position = UDim2.new(0.65, 0, 0.15, 0)
    switch.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    switch.ClipsDescendants = true
    switch.Parent = container
    switch.Active = false
    switch.Selectable = false
    switch.Name = "ToggleSwitch"
    Instance.new("UICorner", switch).CornerRadius = UDim.new(0, 14) -- More rounded

    local circle = Instance.new("Frame")
    circle.Size = UDim2.new(0, 24, 0, 24) -- Larger circle
    circle.Position = UDim2.new(initialState and 1 or 0, initialState and -24 or 2, 0, 2) -- Centered vertically
    circle.BackgroundColor3 = initialState and theme.SwitchOnColor or theme.SwitchOffColor
    circle.Name = "Circle"
    circle.Parent = switch
    Instance.new("UICorner", circle).CornerRadius = UDim.new(1, 0)

    local function setState(state)
        local newPos = UDim2.new(state and 1 or 0, state and -24 or 2, 0, 2)
        local newColor = state and theme.SwitchOnColor or theme.SwitchOffColor
        TweenService:Create(circle, TweenInfo.new(0.2), {Position = newPos, BackgroundColor3 = newColor}):Play()
    end

    switch.Active = false
    switch.Selectable = false

    return container, setState
end

local function createColorPicker(parent, labelText, initialColor, onColorChanged)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -20, 0, 50) -- More vertical space
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Text = labelText
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Font = Enum.Font.GothamSemibold
    label.TextColor3 = theme.TextColor
    label.TextSize = 16
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local colorPreview = Instance.new("Frame")
    colorPreview.Size = UDim2.new(0, 50, 0, 32) -- Larger preview
    colorPreview.Position = UDim2.new(0.65, 0, 0.1, 0)
    colorPreview.BackgroundColor3 = initialColor
    colorPreview.BorderSizePixel = 1
    colorPreview.BorderColor3 = Color3.new(0, 0, 0)
    colorPreview.Parent = container
    Instance.new("UICorner", colorPreview).CornerRadius = UDim.new(0, 8) -- More rounded

    local popup = Instance.new("Frame")
    popup.Size = UDim2.new(0, 220, 0, 220) -- Slightly larger
    popup.BackgroundColor3 = Color3.fromRGB(35, 35, 35) -- Darker background
    popup.Position = UDim2.new(0.5, -110, 0.5, -110)
    popup.AnchorPoint = Vector2.new(0.5, 0.5)
    popup.Visible = false
    popup.Parent = parent.Parent
    popup.ZIndex = 2

    Instance.new("UICorner", popup).CornerRadius = UDim.new(0, 16) -- More rounded

    local colorPickerImage = Instance.new("ImageLabel")
    colorPickerImage.Size = UDim2.new(1, -20, 1, -60)
    colorPickerImage.Position = UDim2.new(0, 10, 0, 10)
    colorPickerImage.BackgroundTransparency = 1
    colorPickerImage.Image = "rbxassetid://4736002134"
    colorPickerImage.Parent = popup
    colorPickerImage.ZIndex = 2

    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 36, 0, 36)
    closeBtn.Position = UDim2.new(1, -46, 0, 10)
    closeBtn.Text = "âœ•"
    closeBtn.TextColor3 = Color3.new(1, 1, 1)
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextSize = 20
    closeBtn.BackgroundColor3 = Color3.fromRGB(190, 40, 40)
    closeBtn.Parent = popup
    closeBtn.ZIndex = 2
    Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 8)

    closeBtn.MouseButton1Click:Connect(function()
        popup.Visible = false
    end)

    local draggingColorPicker = false

    colorPickerImage.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingColorPicker = true
        end
    end)

    colorPickerImage.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingColorPicker = false
        end
    end)

    colorPickerImage.InputChanged:Connect(function(input)
        if draggingColorPicker and input.UserInputType == Enum.UserInputType.MouseMovement then
            local pos = input.Position
            local absPos = colorPickerImage.AbsolutePosition
            local size = colorPickerImage.AbsoluteSize
            local x = math.clamp(pos.X - absPos.X, 0, size.X)
            local y = math.clamp(pos.Y - absPos.Y, 0, size.Y)

            local hue = x / size.X
            local saturation = 1 - (y / size.Y)
            local value = 1

            local c = Color3.fromHSV(hue, saturation, value)

            colorPreview.BackgroundColor3 = c
            onColorChanged(c)
        end
    end)

    colorPreview.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            popup.Visible = not popup.Visible
        end
    end)

    return container
end

local draggingUI = false
local dragInput = nil
local dragStart = nil
local startPos = nil
local sliderDragging = false

local function createUI()
    cleanUp()

    gui = Instance.new("ScreenGui")
    gui.Name = "BrainrotHelper"
    gui.ResetOnSpawn = false
    gui.Parent = player:WaitForChild("PlayerGui")

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 420, 0, 550) -- Slightly wider and taller
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = theme.UIBackgroundColor
    mainFrame.BackgroundTransparency = theme.MainBGTransparency
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = gui
    Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 18) -- More rounded

    local header = Instance.new("TextLabel")
    header.Parent = mainFrame
    header.Size = UDim2.new(1, -40, 0, 50) -- Taller header
    header.Position = UDim2.new(0, 20, 0, 10) -- More padding
    header.BackgroundTransparency = 1
    header.Text = "Brainrot Helper"
    header.TextColor3 = theme.TextColor
    header.Font = Enum.Font.GothamBold
    header.TextSize = 24 -- Larger text
    header.TextXAlignment = Enum.TextXAlignment.Left
    header.Active = true
    header.Selectable = true

    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingUI = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingUI = false
                end
            end)
        end
    end)

    header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    table.insert(connections, UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and draggingUI and not sliderDragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end))

    local closeBtn = Instance.new("TextButton")
    closeBtn.Parent = mainFrame
    closeBtn.Size = UDim2.new(0, 40, 0, 40) -- Larger button
    closeBtn.Position = UDim2.new(1, -50, 0, 10) -- Better positioning
    closeBtn.BackgroundColor3 = Color3.fromRGB(190, 40, 40)
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = "âœ•"
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextSize = 22 -- Larger text
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.AutoButtonColor = true
    Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 12) -- More rounded

    closeBtn.MouseButton1Click:Connect(function()
        cleanUp()
    end)

    local tabsContainer = Instance.new("Frame")
    tabsContainer.Parent = mainFrame
    tabsContainer.Size = UDim2.new(1, -40, 0, 42) -- Taller tabs
    tabsContainer.Position = UDim2.new(0, 20, 0, 60) -- More padding
    tabsContainer.BackgroundTransparency = 1

    local tabNames = {"Main", "Visual", "Misc"}
    local tabButtons = {}
    local pages = {}

    local function setActiveTab(activeName)
        for name, btn in pairs(tabButtons) do
            local isActive = (name == activeName)
            TweenService:Create(btn, TweenInfo.new(0.25), {
                BackgroundColor3 = isActive and theme.SwitchOnColor or Color3.fromRGB(45, 45, 45),
                TextColor3 = isActive and Color3.fromRGB(245, 245, 245) or Color3.fromRGB(180, 180, 180),
            }):Play()
            pages[name].Visible = isActive
        end
    end

    local btnWidth = (tabsContainer.AbsoluteSize.X - 10) / #tabNames
    for i, name in ipairs(tabNames) do
        local btn = Instance.new("TextButton")
        btn.Parent = tabsContainer
        btn.Size = UDim2.new(0, btnWidth, 1, 0)
        btn.Position = UDim2.new(0, (i - 1) * (btnWidth + 5), 0, 0) -- Spacing between tabs
        btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        btn.BorderSizePixel = 0
        btn.Text = name
        btn.Font = Enum.Font.GothamSemibold
        btn.TextSize = 18
        btn.TextColor3 = Color3.fromRGB(180, 180, 180)
        btn.AutoButtonColor = false
        Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 8) -- Rounded tabs

        btn.MouseButton1Click:Connect(function()
            setActiveTab(name)
        end)

        tabButtons[name] = btn

        local page = Instance.new("ScrollingFrame") -- Now scrollable
        page.Parent = mainFrame
        page.Size = UDim2.new(1, -40, 1, -120)
        page.Position = UDim2.new(0, 20, 0, 110)
        page.BackgroundTransparency = 1
        page.Visible = false
        page.ScrollBarThickness = 6
        page.CanvasSize = UDim2.new(0, 0, 0, 600) -- Adjust based on content
        page.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Auto-size to content
        pages[name] = page
        
        local layout = Instance.new("UIListLayout")
        layout.Parent = page
        layout.Padding = UDim.new(0, 7) -- Spacing between elements
        layout.SortOrder = Enum.SortOrder.LayoutOrder
    end

    setActiveTab("Main")

    --// MAIN TAB CONTENT
    local mainPage = pages["Main"]

    -- Fly Toggle
    local flyToggleContainer, flyToggleSet = createToggleSwitch(mainPage, "Fly Enabled", floating)
    flyToggleContainer.LayoutOrder = 1
    
    flyToggleContainer.ToggleSwitch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if floating then
                stopFloating()
            else
                startFloating()
            end
            flyToggleSet(floating)
        end
    end)

    -- Fly Height Slider
    local flyHeightSlider, _ = createSlider(mainPage, "Fly Height", floatHeightOffset, -50, 50, function(val)
        floatHeightOffset = val
    end)
    flyHeightSlider.LayoutOrder = 2

    -- Noclip Toggle
    local noclipToggleContainer, noclipToggleSet = createToggleSwitch(mainPage, "Noclip Enabled", noclipEnabled)
    noclipToggleContainer.LayoutOrder = 3
    
    noclipToggleContainer.ToggleSwitch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            noclipEnabled = not noclipEnabled
            noclipToggleSet(noclipEnabled)
        end
    end)

    local floatSpeedSlider, _ = createSlider(mainPage, "Float Speed", floatSpeed, 1, 40, function(val)
        floatSpeed = val
    end)
    floatSpeedSlider.LayoutOrder = 4

    local teleportDistSlider, _ = createSlider(mainPage, "Teleport Distance", teleportDistance, 1, 20, function(val)
        teleportDistance = val
    end)
    teleportDistSlider.LayoutOrder = 5

    -- ESP Toggle
    local espToggleContainer, espToggleSet = createToggleSwitch(mainPage, "ESP Enabled", espEnabled)
    espToggleContainer.LayoutOrder = 6
    
    -- Disable toggling by UI button (keybind only)
    espToggleContainer.ToggleSwitch.Active = false

    espToggleSet(espEnabled)

    local espColorPicker = createColorPicker(mainPage, "ESP Color", theme.ESPColor, function(newColor)
        theme.ESPColor = newColor
        -- Update existing ESP UIs
        for _, data in pairs(espUIs) do
            if data.box then data.box.BackgroundColor3 = newColor end
            if data.name then data.name.TextColor3 = newColor end
        end
    end)
    espColorPicker.LayoutOrder = 7

    local espTransSlider, _ = createSlider(mainPage, "ESP Transparency", theme.ESPTransparency, 0, 1, function(val)
        theme.ESPTransparency = val
        -- Update existing ESP UIs
        for _, data in pairs(espUIs) do
            if data.box then data.box.BackgroundTransparency = val end
            if data.name then data.name.TextTransparency = val end
        end
    end)
    espTransSlider.LayoutOrder = 8

    local espSizeSlider, _ = createSlider(mainPage, "ESP Size Multiplier", theme.ESPBoxSizeMultiplier, 0.5, 3, function(val)
        theme.ESPBoxSizeMultiplier = val
        espBoxSizeMultiplier = val
    end)
    espSizeSlider.LayoutOrder = 9

    --// VISUAL TAB CONTENT
    local visualPage = pages["Visual"]

    local uiColorPicker = createColorPicker(visualPage, "UI Color", theme.UIBackgroundColor, function(newColor)
        theme.UIBackgroundColor = newColor
        mainFrame.BackgroundColor3 = newColor
    end)
    uiColorPicker.LayoutOrder = 1

    local transparencySlider, _ = createSlider(visualPage, "UI Transparency", theme.MainBGTransparency, 0, 1, function(val)
        theme.MainBGTransparency = val
        mainFrame.BackgroundTransparency = val
    end)
    transparencySlider.LayoutOrder = 2

    --// MISC TAB CONTENT
    local miscPage = pages["Misc"]

    local function saveTheme()
        getgenv().BrainrotTheme = theme
        print("âœ… Theme saved!")
    end

    local function loadTheme()
        local saved = getgenv().BrainrotTheme
        if saved then
            theme = saved
            mainFrame.BackgroundTransparency = theme.MainBGTransparency
            mainFrame.BackgroundColor3 = theme.UIBackgroundColor -- Apply loaded UI color
            floatSpeed = floatSpeed -- keep same local vars if needed
            teleportDistance = teleportDistance

            -- Update sliders and previews:
            transparencySlider:FindFirstChildWhichIsA("TextLabel").Text = tostring(roundTo2Decimals(theme.MainBGTransparency))
            uiColorPicker:FindFirstChildWhichIsA("Frame").BackgroundColor3 = theme.UIBackgroundColor -- Update UI color picker preview
            espTransSlider:FindFirstChildWhichIsA("TextLabel").Text = tostring(roundTo2Decimals(theme.ESPTransparency))
            espColorPicker:FindFirstChildWhichIsA("Frame").BackgroundColor3 = theme.ESPColor
            espSizeSlider:FindFirstChildWhichIsA("TextLabel").Text = tostring(roundTo2Decimals(theme.ESPBoxSizeMultiplier))
            espBoxSizeMultiplier = theme.ESPBoxSizeMultiplier

            espToggleSet(espEnabled)
            flyToggleSet(floating)
            noclipToggleSet(noclipEnabled)

            print("âœ… Theme loaded!")
        else
            warn("No theme saved yet.")
        end
    end

    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(1, 0, 0, 50)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Position = UDim2.new(0, 0, 0, 10)
    buttonContainer.LayoutOrder = 1
    buttonContainer.Parent = miscPage

    local saveBtn = Instance.new("TextButton")
    saveBtn.Parent = buttonContainer
    saveBtn.Size = UDim2.new(0.45, 0, 1, 0)
    saveBtn.Position = UDim2.new(0, 0, 0, 0)
    saveBtn.BackgroundColor3 = theme.SwitchOnColor
    saveBtn.TextColor3 = Color3.new(1, 1, 1)
    saveBtn.Text = "Save Theme"
    saveBtn.Font = Enum.Font.GothamBold
    saveBtn.TextSize = 16
    saveBtn.AutoButtonColor = true
    Instance.new("UICorner", saveBtn).CornerRadius = UDim.new(0, 8)

    saveBtn.MouseButton1Click:Connect(saveTheme)

    local loadBtn = Instance.new("TextButton")
    loadBtn.Parent = buttonContainer
    loadBtn.Size = UDim2.new(0.45, 0, 1, 0)
    loadBtn.Position = UDim2.new(0.55, 0, 0, 0)
    loadBtn.BackgroundColor3 = theme.SwitchOnColor
    loadBtn.TextColor3 = Color3.new(1, 1, 1)
    loadBtn.Text = "Load Theme"
    loadBtn.Font = Enum.Font.GothamBold
    loadBtn.TextSize = 16
    loadBtn.AutoButtonColor = true
    Instance.new("UICorner", loadBtn).CornerRadius = UDim.new(0, 8)

    loadBtn.MouseButton1Click:Connect(loadTheme)

    local keysLabel = Instance.new("TextLabel")
    keysLabel.Parent = miscPage
    keysLabel.Size = UDim2.new(1, 0, 0, 120)
    keysLabel.Position = UDim2.new(0, 0, 0, 70)
    keysLabel.BackgroundTransparency = 1
    keysLabel.TextColor3 = theme.TextColor
    keysLabel.Font = Enum.Font.GothamSemibold
    keysLabel.TextSize = 16
    keysLabel.TextWrapped = true
    keysLabel.Text = "Keybinds:\n\nQ = Float (Fly)\nT = Teleport Forward\nN = Noclip\nE = Toggle ESP"
    keysLabel.TextYAlignment = Enum.TextYAlignment.Top
    keysLabel.LayoutOrder = 2

    --// FUNCTION DEFINITIONS

    local function startFloating()
        if floating then return end
        if not player.Character then return end
        humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        hrp = player.Character:FindFirstChild("HumanoidRootPart")
        if not humanoid or not hrp then return end

        floating = true
        flyToggleSet(true)

        humanoid.PlatformStand = true
        
        bodyPos = Instance.new("BodyPosition")
        bodyPos.Name = "FlyBodyPos"
        bodyPos.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        bodyPos.P = 1250
        bodyPos.Position = hrp.Position + Vector3.new(0, floatHeightOffset, 0)
        bodyPos.Parent = hrp

        bodyVel = Instance.new("BodyVelocity")
        bodyVel.Name = "FlyBodyVel"
        bodyVel.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        bodyVel.Velocity = Vector3.new(0, 0, 0)
        bodyVel.Parent = hrp
    end

    local function stopFloating()
        if not floating then return end
        floating = false
        flyToggleSet(false)
        if bodyPos and bodyPos.Parent then
            bodyPos:Destroy()
            bodyPos = nil
        end
        if bodyVel and bodyVel.Parent then
            bodyVel:Destroy()
            bodyVel = nil
        end
        if humanoid then 
            humanoid.PlatformStand = false
        end
    end

    local function setNoclip(state)
        noclipEnabled = state
        noclipToggleSet(state)
    end

    local function createPlayerESPUI(plr)
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Name = "PlayerESP"
        billboardGui.Size = UDim2.new(0, 100, 0, 150) -- Base size, will scale with distance
        billboardGui.AlwaysOnTop = true
        billboardGui.LightInfluence = 0
        billboardGui.ExtentsOffset = Vector3.new(0, 1, 0) -- Adjust origin slightly above HRP
        billboardGui.StudsOffset = Vector3.new(0, 1, 0) -- Render slightly above character
        billboardGui.Active = false -- Make it not interact with mouse
        billboardGui.ZIndex = 1 -- Ensure it's rendered above other things
        
        local boxFrame = Instance.new("Frame")
        boxFrame.Name = "Box"
        boxFrame.Size = UDim2.new(1, 0, 1, 0)
        boxFrame.BackgroundColor3 = theme.ESPColor
        boxFrame.BackgroundTransparency = theme.ESPTransparency
        boxFrame.BorderSizePixel = 1
        boxFrame.BorderColor3 = theme.ESPColor
        boxFrame.Parent = billboardGui

        -- Outer border for the box to make it more visible (simulate thickness)
        local outerBorder = Instance.new("Frame")
        outerBorder.Name = "OuterBorder"
        outerBorder.Size = UDim2.new(1, 2, 1, 2) -- Slightly larger
        outerBorder.Position = UDim2.new(0.5, -1, 0.5, -1) -- Center it
        outerBorder.AnchorPoint = Vector2.new(0.5, 0.5)
        outerBorder.BackgroundColor3 = theme.ESPColor
        outerBorder.BackgroundTransparency = theme.ESPTransparency + 0.1 -- Slightly more transparent
        outerBorder.ZIndex = -1 -- Render behind the main box
        outerBorder.Parent = boxFrame -- Make it a child of the box to inherit its position
        
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "Name"
        nameLabel.Size = UDim2.new(1, 0, 0, 20)
        nameLabel.Position = UDim2.new(0, 0, -0.15, 0) -- Position above the box
        nameLabel.Text = plr.Name
        nameLabel.TextColor3 = theme.ESPColor
        nameLabel.TextTransparency = theme.ESPTransparency
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextSize = 14
        nameLabel.BackgroundTransparency = 1
        nameLabel.Parent = billboardGui

        return {billboardGui = billboardGui, box = boxFrame, name = nameLabel}
    end

    local function toggleESP(state)
        espEnabled = state
        if espEnabled then
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    if not espUIs[plr] then
                        local espData = createPlayerESPUI(plr)
                        espUIs[plr] = espData
                        -- Parent the BillboardGui to the player's HumanoidRootPart
                        -- This allows it to follow the player
                        espData.billboardGui.Adornee = plr.Character.HumanoidRootPart
                        espData.billboardGui.Parent = game:GetService("CoreGui") -- Parent to CoreGui to be always visible
                    end
                    -- Ensure visibility and apply current theme settings
                    espUIs[plr].billboardGui.Enabled = true
                    espUIs[plr].box.BackgroundColor3 = theme.ESPColor
                    espUIs[plr].box.BackgroundTransparency = theme.ESPTransparency
                    espUIs[plr].name.TextColor3 = theme.ESPColor
                    espUIs[plr].name.TextTransparency = theme.ESPTransparency
                end
            end
        else
            for _, data in pairs(espUIs) do
                if data.billboardGui then data.billboardGui.Enabled = false end
            end
            -- Don't clear espUIs here to allow re-enabling without recreating,
            -- but still clean up in cleanUp() when script stops.
        end
    end

    -- Handle new players joining while ESP is enabled
    table.insert(connections, Players.PlayerAdded:Connect(function(newPlayer)
        if espEnabled and newPlayer ~= player then
            newPlayer.CharacterAdded:Connect(function(char)
                if not espUIs[newPlayer] then
                    local espData = createPlayerESPUI(newPlayer)
                    espUIs[newPlayer] = espData
                    espData.billboardGui.Adornee = char:WaitForChild("HumanoidRootPart")
                    espData.billboardGui.Parent = game:GetService("CoreGui")
                    espData.billboardGui.Enabled = true
                end
            end)
        end
    end))

    -- Handle players leaving (cleanup)
    table.insert(connections, Players.PlayerRemoving:Connect(function(oldPlayer)
        if espUIs[oldPlayer] then
            if espUIs[oldPlayer].billboardGui then espUIs[oldPlayer].billboardGui:Destroy() end
            espUIs[oldPlayer] = nil
        end
    end))

    local function updateESP()
        if not espEnabled then
            return
        end

        for plr, data in pairs(espUIs) do
            local char = plr.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")

            if char and hrp and data.billboardGui and data.billboardGui.Adornee == hrp then
                -- Calculate dynamic size based on distance and multiplier
                local distance = (camera.CFrame.p - hrp.Position).magnitude
                local baseSize = math.clamp(500 / distance, 50, 200) -- Adjust these values for desired scaling
                local finalSize = baseSize * espBoxSizeMultiplier

                data.billboardGui.Size = UDim2.new(0, finalSize * 0.75, 0, finalSize) -- Adjust proportions for box
                data.billboardGui.Enabled = true
            else
                -- If character or HRP is gone, disable/destroy GUI
                if data.billboardGui then data.billboardGui.Enabled = false end
            end
        end
    end

    local function teleportForward()
        local char = player.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            local root = char.HumanoidRootPart
            local target = root.Position + root.CFrame.LookVector * teleportDistance
            local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local tween = TweenService:Create(root, tweenInfo, {CFrame = CFrame.new(target)})
            tween:Play()
        end
    end

    table.insert(connections, RunService.RenderStepped:Connect(updateESP))

    table.insert(connections, RunService.Heartbeat:Connect(function()
        if floating and hrp and bodyPos and bodyVel then
            -- Apply height offset
            bodyPos.Position = Vector3.new(hrp.Position.X, hrp.Position.Y + floatHeightOffset, hrp.Position.Z)

            local camCF = camera.CFrame
            local forward = camCF.LookVector
            local right = camCF.RightVector
            local moveVec = Vector3.new()

            if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveVec += forward end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveVec -= forward end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveVec -= right end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveVec += right end

            moveVec = Vector3.new(moveVec.X, 0, moveVec.Z)
            if moveVec.Magnitude > 0 then
                moveVec = moveVec.Unit * floatSpeed
            end
            bodyVel.Velocity = moveVec
        elseif bodyVel and bodyVel.Parent then
            bodyVel.Velocity = Vector3.new(0, 0, 0)
        end
    end))

    table.insert(connections, RunService.Stepped:Connect(function()
        if noclipEnabled and player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end
    end))

    table.insert(connections, UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.Q then
                if floating then
                    stopFloating()
                else
                    startFloating()
                end
            elseif input.KeyCode == Enum.KeyCode.T then
                teleportForward()
            elseif input.KeyCode == Enum.KeyCode.E then
                espEnabled = not espEnabled
                espToggleSet(espEnabled)
                toggleESP(espEnabled)
            elseif input.KeyCode == Enum.KeyCode.N then
                noclipEnabled = not noclipEnabled
                setNoclip(noclipEnabled)
            end
        end
    end))
end

createUI()

print("âœ… Brainrot Crazy UI fully loaded. Use keys: Q=Float, T=Teleport, N=Noclip, E=ESP toggle.")
